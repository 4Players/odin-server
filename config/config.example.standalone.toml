### The FQDN and port number where the server can be reached from the Internet.
public_address = "localhost:4433"

[authorization]
### A List of JWKs that are valid for signing tokens.
keys = [
    { kid = "AWMsrlLGIO/K", kty = "OKP", crv = "Ed25519", x = "Vs-VjcqDRizEvU9c0fOwE2CnwfrE0vB4IyuLwOoW1gc", d = "ktMKF-y1FC84JT-R6vz9VwkX7eKN5QpiWbHVrY5J5Yw" },
]
### Prevent using unsigned tokens for authentication.
allow_unsigned = false
### The number of milliseconds a login token can be before or beyond its valid time period and still pass.
leeway = 5_000 # ms

[quic]
### The socket where incoming QUIC connections are accepted from.
binding = "0.0.0.0:4433"
### The path to a PEM-encoded leaf certificate followed by optional intermediate certificates.
certificate_file = "fullchain.pem"
### The path to a PEM-encoded private key.
privatekey_file = "privkey.pem"
### Time in milliseconds between keep-alive packets sent by the server.
keep_alive_interval = 5_000 # ms
### Drop a connection if no packets have been received in this time span in milliseconds.
idle_timeout = 30_000 # ms
### The maximum time the sender waits for a packet to be inserted into the send buffer.
pre_send_timeout = 500 # ms
## The maximum time in milliseconds a client can stay connected, after leaving all rooms.
no_peers_timeout = 1_000 # ms
## The maximum time in milliseconds a connection can take to finish the HTTP/3 setup, until a client is created.
connect_timeout = 1_000 # ms
### Accept IP address changes from clients.
migration = true

[http]
### The socket where incoming WebSocket connections are accepted from.
binding = "0.0.0.0:4433"
### The path to a PEM-encoded leaf certificate followed by optional intermediate certificates.
certificate_file = "fullchain.pem"
### The path to a PEM-encoded private key.
privatekey_file = "privkey.pem"
### Socket where WebRTC connections are accepted from.
webrtc_binding = "0.0.0.0:8844"
### The list of IP addresses to be offered as candidates.
webrtc_candidates = ["127.0.0.1", "::1"]
### Drop connections after this much inactivity in milliseconds.
timeout = 10_000 # ms
### Send a ping to the client using this interval in milliseconds.
ping_interval = 5_000 # ms

[limit]
### The maximum number of concurrent clients
max_clients = 25
### The maximum number of concurrent peers
max_peers = 25
### The maximum number of concurrent rooms
max_rooms = 25

[limit.peer]
### The number of command packets of a peer that are processed by the server every second.
incoming_messages = { rate = 10, capacity = 50, overflow = 20 }
### The number of medias a peer can create.
medias = 5

[log.terminal]
### The verbosity level [0-3] to define how much information should be written to logs (defaults to 1).
verbosity = 1
### Optional list of modules filtered from logs to prevent unnecessary noise, except for error messages.
filters = ["webrtc", "webrtc_ice"]

[metrics]
### The socket where incoming connections are accepted from.
binding = "0.0.0.0:9000"
### How long after the last change a metric value is reported.
idle_timeout = 3_600_000 # ms
### Labels that are added to all reported metrics.
global_labels = { deployment = "foo" }
### List of IP subnets that are allowed to query metrics from the server.
allowed = ["127.0.0.0/8"]

[internal]
### A debug option to emit warnings if RPC calls take longer then the threshold in milliseconds.
log_hanging_api_calls = 1_000 # ms
